# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  deletedAt: DateTime
  email: String!
  username: String!
  accountStatus: AccountStatus!
  accountRole: AccountRole!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum AccountStatus {
  Unverified
  Verified
  Banned
}

enum AccountRole {
  User
  Admin
  SuperAdmin
}

type VerifyUserPayload {
  id: String!
  email: String!
  username: String!
  accountStatus: AccountStatus!
  accountRole: AccountRole!
}

type AuthPayload {
  user: UserPayload!
  accessToken: String!
  refreshToken: String!
}

union UserPayload = AuthUserPayload | VerifyUserPayload

type AuthUserPayload {
  id: String!
  username: String!
  accountStatus: AccountStatus!
  accountRole: AccountRole!
}

type RefreshPayload {
  user: UserPayload!
  accessToken: String!
}

input UserInput {
  email: String!
  username: String!
  accountStatus: AccountStatus!
  accountRole: AccountRole!
}

type Query {
  uptime: Float!
  findAllUser: [User!]!
  findOneUser(id: String!): User!
  findUser(partialItem: UpdateUserInput!): [User!]!

  """Returns full user info (without password)."""
  profile: User!
}

input UpdateUserInput {
  id: String!
  email: String!
  username: String!
  accountRole: AccountRole!
  accountStatus: AccountStatus!
}

type Mutation {
  createUser(item: CreateUserInput!): User!
  updateUser(partialItem: UpdateUserInput!, id: String!): Boolean!
  deleteUser(ids: [String!]!): Boolean!
  restoreUser(ids: [String!]!): Boolean!
  deletePermanentUser(ids: [String!]!): Boolean!

  """Creates new user. Email and Username have to be unique."""
  signup(signupData: SignUpInput!): VerifyUserPayload!

  """
  Logs user in, attaches cookie to client as HttpOnly, returns user info and JWT access_token.
  """
  login(password: String!, email: String, username: String): AuthPayload!

  """Removes cookie from client to prevent further access."""
  logout: Boolean!

  """Refreshes access token using refreshToken"""
  refresh(refreshToken: String): RefreshPayload!

  """
  Verification post-signup. Link sent to email contains JWT token containing user info.
  """
  verify: AuthPayload!
}

input CreateUserInput {
  email: String!
  username: String!
  password: String!
}

input SignUpInput {
  username: String!
  email: String!
  password: String!
}
