# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type User {
  id: String!
  email: String!
  username: String!
  accountStatus: AccountStatus
  accountRole: AccountRole
}

enum AccountStatus {
  Unverified
  Verified
  Banned
}

enum AccountRole {
  User
  Admin
  SuperAdmin
}

type VerifyUserPayload {
  id: String!
  email: String!
  username: String!
  accountStatus: AccountStatus
  accountRole: AccountRole
}

type AuthPayload {
  user: UserPayload!
  accessToken: String!
  refreshToken: String!
}

union UserPayload = AuthUserPayload | VerifyUserPayload

type AuthUserPayload {
  id: String!
  username: String!
  accountStatus: AccountStatus
  accountRole: AccountRole
}

type RefreshPayload {
  user: UserPayload!
  accessToken: String!
}

type Query {
  uptime: Float!
  users: [User!]!
  user(id: Int!): User!

  """Returns full user info (without password)."""
  profile: User!
}

type Mutation {
  createUser(createUserInput: CreateUserInput!): User!
  updateUser(updateUserInput: UpdateUserInput!): User!
  removeUser(id: Int!): User!

  """Creates new user. Email and Username have to be unique."""
  signup(signupData: SignUpInput!): VerifyUserPayload!

  """
  Logs user in, attaches cookie to client as HttpOnly, returns user info and JWT access_token.
  """
  login(password: String!, email: String, username: String): AuthPayload!

  """Removes cookie from client to prevent further access."""
  logout: Boolean!

  """Refreshes access token using refreshToken"""
  refresh(refreshToken: String): RefreshPayload!

  """
  Verification post-signup. Link sent to email contains JWT token containing user info.
  """
  verify: AuthPayload!
}

input CreateUserInput {
  email: String!
  username: String!
  password: String!
}

input UpdateUserInput {
  email: String
  username: String
  password: String
  id: String!
}

input SignUpInput {
  username: String!
  email: String!
  password: String!
}
